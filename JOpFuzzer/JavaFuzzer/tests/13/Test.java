// Generated by Java* Fuzzer test generator (1.0.001). Mon Apr 10 13:04:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3356983292369129828L;
    public static float fFld=-80.118F;
    public static int iFld=-59;
    public static short sFld=6216;
    public boolean bFld=true;
    public static volatile int iFld1=-43871;
    public static volatile long lArrFld[]=new long[N];
    public short sArrFld[]=new short[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -69L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i3=53112, i4=-92, i5=-253, i6=-74, i7=179, i8=131;
        short s=-28532;
        double d=-1.25054;

        i3 = i3;
        Test.fFld = i3;
        for (i4 = 3; i4 < 362; ++i4) {
            boolean b=false;
            i3 <<= (int)Test.instanceCount;
            if (b) continue;
            Test.lArrFld[i4] = -121L;
            Test.fFld *= -3176725344924260299L;
            Test.fFld -= s;
            for (i6 = i4; 5 > i6; i6++) {
                i3 += Test.iFld;
                Test.lArrFld[i4 + 1] = i5;
                Test.fFld += Test.instanceCount;
                for (d = 1; i6 < d; --d) {
                    i5 *= Test.iFld;
                    Test.instanceCount -= Test.instanceCount;
                }
            }
        }
        long meth_res = i3 + i4 + i5 + s + i6 + i7 + Double.doubleToLongBits(d) + i8;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i2) {

        int i9=40797, i10=-227, i11=3, i12=-245, i13=-90, i14=253, iArr1[]=new int[N];
        boolean b1=true;
        short s1=-23193;

        FuzzerUtils.init(iArr1, 27279);

        Test.fFld += (((-(++i2)) * iMeth1()) + Test.instanceCount);
        try {
            if (b1) {
                for (i9 = 13; i9 < 309; i9 += 2) {
                    Test.instanceCount -= Test.iFld;
                    Test.iFld = Test.iFld;
                }
                i2 = i2;
                for (i11 = 2; i11 < 197; i11++) {
                    i13 = 8;
                    do {
                        i2 += (i13 | i13);
                        try {
                            i10 = (i10 % Test.iFld);
                            iArr1[i13 + 1] = (i9 % -38977220);
                            i10 = (i13 % 1798862983);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount += (((i13 * i9) + Test.instanceCount) - Test.iFld);
                        i14 = 1;
                        while (++i14 < 3) {
                            Test.iFld -= (int)Test.instanceCount;
                            iArr1[i13 - 1] = i13;
                        }
                    } while ((i13 -= 3) > 0);
                }
            } else if (b1) {
                i10 <<= i2;
            }
        }
        catch (NullPointerException exc1) {
            Test.instanceCount += Test.instanceCount;
        }
        finally {
            Test.fFld += s1;
        }
        long meth_res = i2 + i9 + i10 + i11 + i12 + i13 + i14 + (b1 ? 1 : 0) + s1 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i, int i1, float f) {

        double d1=1.61920;
        long l=3479217360499916088L;
        int i15=43075, i17=-100, i18=-225, iArr[]=new int[N];
        short s2=994;

        FuzzerUtils.init(iArr, 43360);

        iArr[(i1 >>> 1) % N] *= (iMeth(Test.iFld) - -13216);
        sArrFld[(Test.iFld >>> 1) % N] = (short)Test.iFld;
        switch ((((Test.iFld >>> 1) % 2) * 5) + 74) {
        case 80:
            i1 = (int)d1;
            d1 -= i;
            break;
        case 84:
            for (l = 333; l > 16; --l) {
                int i16=11;
                i16 = Test.iFld;
                switch ((int)((l % 3) + 112)) {
                case 112:
                    i16 -= 7;
                    for (i17 = 5; i17 > 1; i17 -= 2) {
                        s2 += (short)(13.260F + (i17 * i17));
                        d1 += i15;
                        d1 = i1;
                        iArr[i17 - 1] = -20821;
                        iArr[(int)(l + 1)] = i16;
                    }
                    break;
                case 113:
                    Test.iFld -= i1;
                case 114:
                    i18 -= i16;
                default:
                    i += (int)(l * l);
                }
            }
            break;
        }
        vMeth_check_sum += i + i1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + l + i15 + i17 + i18 + s2 +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        byte by=106;
        int i19=-7, i20=-9545, i21=-1, i22=-4, i23=-96, i24=-33877, i25=-41273, i26=8, i27=-39;
        double d2=-29.79645;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        vMeth(110, 196, Test.fFld);
        iArrFld[(Test.iFld >>> 1) % N] += Test.sFld;
        by += (byte)Test.iFld;
        Test.instanceCount = (long)Test.fFld;
        for (i19 = 291; i19 > 12; --i19) {
            for (i21 = 4; i21 < 90; ++i21) {
                i22 += (int)Test.instanceCount;
                Test.instanceCount = i20;
                d2 = Test.instanceCount;
                Test.sFld = (short)Test.fFld;
                Test.instanceCount += (((i21 * Test.instanceCount) + i21) - i21);
                for (i23 = 1; i23 < 2; ++i23) {
                    iArrFld[i23 + 1] = 13;
                }
                switch ((i19 % 6) + 31) {
                case 31:
                    by = (byte)i22;
                    bArr[i21] = bFld;
                    break;
                case 32:
                    iArrFld[i21 - 1] = -168;
                    iArrFld[i19] = i24;
                    for (i25 = 1; i25 < 2; i25++) {
                        i24 += i19;
                        Test.sFld = (short)i25;
                        i20 += (i25 * i25);
                        i26 = i26;
                        iArrFld[i19] *= Test.iFld1;
                        iArrFld[i25] -= -2;
                        if (bFld) continue;
                    }
                    i27 = 1;
                    do {
                        d2 *= Test.instanceCount;
                        by += (byte)(i27 | i24);
                        i20 += i27;
                    } while (++i27 < 2);
                    break;
                case 33:
                    Test.iFld1 += (i21 | Test.instanceCount);
                    break;
                case 34:
                    Test.instanceCount += i19;
                    break;
                case 35:
                    i22 = (int)Test.instanceCount;
                    break;
                case 36:
                    i20 >>= i19;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("by i19 i20 = " + by + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 d2 = " + i21 + "," + i22 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 bArr = " + i26 + "," + i27 + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.sFld bFld Test.iFld1 = " + Test.sFld + "," + (bFld ? 1 : 0) + "," + Test.iFld1);
        FuzzerUtils.out.println("Test.lArrFld sArrFld iArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            FuzzerUtils.checkSum(sArrFld) + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
