// Generated by Java* Fuzzer test generator (1.0.001). Mon Apr 10 13:03:48 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7L;
    public static float fFld=2.306F;
    public static volatile short sFld=6490;
    public static byte byFld=102;
    public double dFld=1.116869;
    public static volatile long lArrFld[]=new long[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 243L);
        FuzzerUtils.init(Test.byArrFld, (byte)-121);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i2, int i3, double d1) {

        int i4=215, i5=243, i6=77, i7=40, i8=-6, i9=46602;
        byte by=44;
        short s=-27201;
        float fArr1[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr1, 4.834F);
        FuzzerUtils.init(lArr, 7602384930836899157L);

        Test.fFld += i2;
        i2 = i3;
        for (i4 = 282; i4 > 11; i4--) {
            Test.fFld -= 8;
            by += (byte)(i4 * i5);
            Test.instanceCount >>= i3;
            fArr1 = FuzzerUtils.float1array(N, (float)-1.292F);
            Test.instanceCount = i4;
            for (i6 = i4; i6 < 6; ++i6) {
                Test.instanceCount += (i6 + i7);
                lArr = lArr;
                for (i8 = 1; i8 < 1; i8++) {
                    s += (short)(i8 - i3);
                }
                i7 &= i7;
                i7 >>= i6;
            }
        }
        vMeth2_check_sum += i2 + i3 + Double.doubleToLongBits(d1) + i4 + i5 + by + i6 + i7 + i8 + i9 + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(long l1, int i1, long l2) {

        int i10=37255, i11=123, i12=3, i13=-53470, i14=-54;
        double d2=-2.126387;
        byte by1=-93;
        boolean b=false;
        float fArr2[]=new float[N];

        FuzzerUtils.init(fArr2, 0.208F);

        vMeth2(i1, i10, d2);
        i10 += i10;
        i1 <<= (int)l1;
        for (i11 = 1; i11 < 326; i11++) {
            i13 = 1;
            while ((i13 += 3) < 5) {
                i14 = 1;
                while (++i14 < 5) {
                    fArr2[i11] -= Test.instanceCount;
                    Test.instanceCount += i10;
                    by1 += (byte)(i14 | i10);
                    i10 = Test.sFld;
                    Test.instanceCount |= l1;
                    i1 += (i14 * i14);
                    i10 *= (int)l1;
                    i1 += (int)-1.957F;
                }
                if (b) break;
            }
        }
        vMeth1_check_sum += l1 + i1 + l2 + i10 + Double.doubleToLongBits(d2) + i11 + i12 + i13 + i14 + by1 + (b ? 1 :
            0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2));
    }

    public static void vMeth(float f, long l) {

        int i=5, i15=10, i16=-35398, i17=-4, i18=-9, i19=-23086, i20=22710;
        double d=0.27939;
        boolean b1=false;
        float fArr[]=new float[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(fArr, 0.172F);
        FuzzerUtils.init(sArr, (short)6656);

        fArr[(i >>> 1) % N] *= (float)Math.abs(d);
        vMeth1(Test.instanceCount, i, l);
        d = i;
        Test.sFld = (short)Test.fFld;
        if (b1) {
            for (i15 = 8; i15 < 367; ++i15) {
                i16 = i;
                i += i15;
                i16 += (i15 * i15);
                for (i17 = i15; i17 < 5; i17++) {
                    for (i19 = 1; 1 > i19; ++i19) {
                        fArr[i15 + 1] = 7;
                        i <<= (int)Test.instanceCount;
                        sArr[i19 + 1] = (short)166L;
                        Test.byFld += (byte)(((i19 * i19) + Test.instanceCount) - i17);
                    }
                }
            }
        } else {
            i20 *= i15;
            vMeth_check_sum += Float.floatToIntBits(f) + l + i + Double.doubleToLongBits(d) + i15 + i16 + i17 + i18 +
                i19 + i20 + (b1 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
                FuzzerUtils.checkSum(sArr);
            return;
        }
        vMeth_check_sum += Float.floatToIntBits(f) + l + i + Double.doubleToLongBits(d) + i15 + i16 + i17 + i18 + i19 +
            i20 + (b1 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i21=229, i22=244, i23=50, i24=5, i25=-59670, i26=5, i27=9554, i28=-11, iArr[]=new int[N];
        boolean b2=false;
        double d3=-1.49086;
        float fArr3[]=new float[N];

        FuzzerUtils.init(iArr, -60060);
        FuzzerUtils.init(fArr3, 1.386F);

        vMeth(Test.fFld, 206L);
        for (i21 = 347; i21 > 18; i21--) {
            i22 += (i21 | (long)Test.fFld);
            iArr[i21] += i22;
            i22 += (((i21 * Test.fFld) + i22) - Test.instanceCount);
            for (i23 = i21; i23 < 76; i23 += 3) {
                switch ((i21 % 7) + 56) {
                case 56:
                    b2 = b2;
                    break;
                case 57:
                    for (i25 = 1; 1 > i25; i25++) {
                        Test.instanceCount += i25;
                        fArr3[i23 + 1] -= i22;
                        iArr[i23 + 1] -= i24;
                        i26 += i25;
                        d3 -= i25;
                        i26 = i25;
                    }
                    for (i27 = 1; 1 > i27; ++i27) {
                        switch ((((i25 >>> 1) % 1) * 5) + 4) {
                        case 8:
                            i26 += i23;
                            break;
                        }
                        Test.byArrFld[i27 + 1] += (byte)dFld;
                        Test.sFld *= (short)25;
                        i22 = i21;
                        i24 *= i27;
                        i26 = (int)Test.fFld;
                        iArr[i21 + 1] = i26;
                        if (b2) break;
                    }
                    break;
                case 58:
                    if (b2) break;
                    break;
                case 59:
                    b2 = b2;
                    Test.fFld += i24;
                    break;
                case 60:
                    Test.instanceCount -= i27;
                    i24 += (i23 - i26);
                    break;
                case 61:
                case 62:
                    i22 = -6;
                    break;
                default:
                    i22 += (int)(149916965012891405L + (i23 * i23));
                }
            }
        }

        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 b2 i25 = " + i24 + "," + (b2 ? 1 : 0) + "," + i25);
        FuzzerUtils.out.println("i26 d3 i27 = " + i26 + "," + Double.doubleToLongBits(d3) + "," + i27);
        FuzzerUtils.out.println("i28 iArr fArr3 = " + i28 + "," + FuzzerUtils.checkSum(iArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr3)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.byFld dFld Test.lArrFld = " + Test.byFld + "," + Double.doubleToLongBits(dFld) +
            "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.byArrFld = " + FuzzerUtils.checkSum(Test.byArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
