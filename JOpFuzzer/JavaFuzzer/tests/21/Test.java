// Generated by Java* Fuzzer test generator (1.0.001). Mon Apr 10 13:03:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-17351L;
    public static int iFld=-49286;
    public static float fFld=0.691F;
    public byte byFld=-115;
    public static short sFld=-889;
    public static boolean bFld=false;
    public static short sArrFld[][]=new short[N][N];
    public static volatile int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)26106);
        FuzzerUtils.init(Test.iArrFld, 73);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f) {

        short s=1116;
        int i8=-45609, i9=159, i10=-19222, i11=55020, iArr[]=new int[N];
        double d=5.89641;

        FuzzerUtils.init(iArr, -12);

        Test.instanceCount += 254L;
        Test.iFld *= Test.iFld;
        Test.iFld = s;
        iArr[(Test.iFld >>> 1) % N] >>= Test.iFld;
        for (i8 = 9; i8 < 199; i8++) {
            Test.instanceCount += (((i8 * s) + Test.instanceCount) - Test.iFld);
            Test.iFld += (int)(190L + (i8 * i8));
            switch ((i8 % 3) + 61) {
            case 61:
                Test.instanceCount -= i8;
                for (i10 = 1; i10 < 8; i10++) {
                    i11 *= (int)Test.instanceCount;
                    i9 *= (int)f;
                    Test.instanceCount += (19731 + (i10 * i10));
                    i9 *= (int)d;
                    f -= i10;
                }
                break;
            case 62:
                i11 += (i8 * i8);
                break;
            case 63:
                Test.iFld += (i8 + i8);
                break;
            default:
                Test.instanceCount -= 43488;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + s + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth() {

        int i5=218, i6=0, i7=146, i12=7, i13=13, i14=-29, i15=-50, i16=10, i17=41, i18=38138;
        long l1=119L;
        double d2=69.82510, dArr[]=new double[N];
        boolean b=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(dArr, -99.112162);
        FuzzerUtils.init(fArr, 0.534F);

        i5 <<= (int)(++Test.instanceCount);
        for (i6 = 13; i6 < 377; i6++) {
            i7 += (i6 * i6);
        }
        vMeth1(Test.fFld);
        for (i12 = 2; 248 > i12; ++i12) {
            for (l1 = 1; l1 < 7; l1++) {
                i13 += (int)(l1 * l1);
                d2 = i13;
                for (i15 = 1; i15 < 2; i15++) {
                    i14 *= (int)l1;
                    i14 += (i15 + Test.instanceCount);
                }
                for (i17 = 2; 1 < i17; --i17) {
                    fArr[(195 >>> 1) % N] += i5;
                    Test.instanceCount = i6;
                    if (b) continue;
                }
            }
        }
        vMeth_check_sum += i5 + i6 + i7 + i12 + i13 + l1 + i14 + Double.doubleToLongBits(d2) + i15 + i16 + i17 + i18 +
            (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public long lMeth(int i4, long l) {

        int i19=-9801, i20=-3, i21=-35422, i22=6, i23=189, i25=-2, iArr1[]=new int[N];
        double d3=0.54067;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, -8);
        FuzzerUtils.init(lArr1, 144462828879745207L);

        vMeth();
        i4 = Test.iFld;
        Test.sArrFld = Test.sArrFld;
        for (i19 = 3; 121 > i19; ++i19) {
            i4 -= (int)d3;
            byFld -= (byte)Test.iFld;
            Test.iFld += (((i19 * i19) + i19) - l);
            i21 = 1;
            do {
                Test.iFld += (((i21 * Test.instanceCount) + i21) - i21);
            } while (++i21 < 13);
        }
        switch (((i20 >>> 1) % 7) + 47) {
        case 47:
            i20 >>= i20;
            break;
        case 48:
        case 49:
        case 50:
            iArr1[(i4 >>> 1) % N] >>>= byFld;
            for (i22 = 6; i22 < 125; ++i22) {
                l += i22;
                l = i22;
            }
            break;
        case 51:
            Test.fFld = (float)d3;
            break;
        case 52:
            iArr1[(Test.iFld >>> 1) % N] = i25;
            break;
        case 53:
            lArr1[(34 >>> 1) % N] ^= -36237;
            break;
        default:
            i4 >>= i4;
        }
        long meth_res = i4 + l + i19 + i20 + Double.doubleToLongBits(d3) + i21 + i22 + i23 + i25 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=7, i1=14, i2=-11, i3=7727, i26=233, i27=38263, i28=12749, i29=-113;
        long lArr[]=new long[N];

        

        for (i = 17; i < 333; ++i) {
            for (i2 = 1; i2 < 80; i2++) {
                i3 -= (int)((i1++) - ((i1 + i) - lArr[i]));
                if (Test.bFld) {
                    lMeth(i1, Test.instanceCount);
                    i3 += i1;
                    Test.iArrFld[i2 - 1] *= i1;
                    i3 = (int)1.292F;
                } else if (Test.bFld) {
                    Test.instanceCount <<= i2;
                    for (i26 = 1; i26 < 2; i26 += 3) {
                        lArr[i26 + 1] |= i26;
                        byFld = (byte)i;
                        Test.iFld += (i26 * Test.instanceCount);
                        Test.instanceCount += (i26 * i26);
                        i1 <<= 150;
                        Test.instanceCount += (((i26 * i27) + i27) - Test.iFld);
                        Test.fFld /= (Test.instanceCount | 1);
                        Test.iFld *= Test.sFld;
                        Test.fFld -= Test.instanceCount;
                        i27 += (i26 * i26);
                    }
                }
                try {
                    i3 = (-6653 / i);
                    i27 = (i26 % i);
                    Test.iFld = (-210 / i2);
                } catch (ArithmeticException a_e) {}
                for (i28 = 1; i28 < 2; i28++) {
                    Test.fFld -= i27;
                    i1 += i28;
                    switch ((i % 2) + 88) {
                    case 88:
                        i29 += (i28 * i28);
                        Test.fFld = Test.fFld;
                        break;
                    case 89:
                        Test.instanceCount += (62049 + (i28 * i28));
                        Test.instanceCount -= (long)Test.fFld;
                        break;
                    }
                    Test.bArrFld[i2 + 1] = Test.bFld;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
	FuzzerUtils.init(lArr, 59L);

        FuzzerUtils.out.println("i3 i26 i27 = " + i3 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 lArr = " + i28 + "," + i29 + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("byFld Test.sFld Test.bFld = " + byFld + "," + Test.sFld + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.sArrFld Test.iArrFld Test.bArrFld = " + FuzzerUtils.checkSum(Test.sArrFld) + ","
            + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
