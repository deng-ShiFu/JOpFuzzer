// Generated by Java* Fuzzer test generator (1.0.001). Mon Apr 10 13:03:48 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=15266L;
    public int iFld=3;
    public static short sFld=-12042;
    public int iFld1=117;
    public float fFld=-1.858F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -6944);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i5=-23077, i6=8, i7=52437, i8=6, i9=-28953, iArr1[]=new int[N];
        float f=2.965F;
        double d=-57.37508;

        FuzzerUtils.init(iArr1, 3);

        i5 = (int)f;
        d = 187;
        do {
            Test.iArrFld[(int)(d + 1)] += i5;
            i5 = i5;
            for (i6 = 24; i6 > d; i6--) {
                Test.iArrFld[i6 + 1] -= (int)2L;
                f = i5;
                i7 = (int)Test.instanceCount;
                for (i8 = i6; i8 < 1; ++i8) {
                    switch (((16640 >>> 1) % 2) + 4) {
                    case 4:
                        i7 += (29535 + (i8 * i8));
                        i7 += (i8 * i8);
                        iArr1[i6 - 1] <<= (int)Test.instanceCount;
                        break;
                    case 5:
                        i9 = -119;
                        iArr1[i8] = i9;
                        break;
                    }
                }
            }
        } while ((d -= 3) > 0);
        long meth_res = i5 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i6 + i7 + i8 + i9 +
            FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i1=-8, i2=3, i3=-28746, i4=-98;
        float f1=0.510F;
        short sArr[][]=new short[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr, (short)-9074);
        FuzzerUtils.init(lArr, 249L);

        i1 = 1;
        do {
            for (i2 = 12; i2 > 1; i2--) {
                byte by=-48;
                sArr[i1 + 1][i1 - 1] >>= (short)(Test.instanceCount++);
                Test.iArrFld[i2] -= (--sArr[i1 + 1][i1 - 1]);
                i4 = 1;
                do {
                    i3 = (int)(iMeth1() * f1);
                    Test.instanceCount |= i1;
                    Test.iArrFld[i2 + 1] = (int)Test.instanceCount;
                } while (++i4 < 2);
                i3 -= i1;
                lArr[i1] |= i2;
                i3 += by;
                if (i2 != 0) {
                    vMeth_check_sum += i1 + i2 + i3 + i4 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(sArr) +
                        FuzzerUtils.checkSum(lArr);
                    return;
                }
                Test.iArrFld[i2] >>= i3;
            }
            Test.instanceCount = Test.instanceCount;
            i3 &= i2;
        } while (++i1 < 129);
        vMeth_check_sum += i1 + i2 + i3 + i4 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public int iMeth() {

        int i10=58;
        double d1=-13.62527;
        float f2=-61.247F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-101);

        Test.instanceCount = Math.max(++iFld, --Test.iArrFld[(iFld >>> 1) % N]);
        vMeth();
        for (byte by1 : byArr) {
            switch (((5 >>> 1) % 9) + 89) {
            case 89:
                i10 = 1;
                while (++i10 < 4) {
                    iFld = iFld;
                    Test.instanceCount += i10;
                    iFld = i10;
                    iFld = (int)Test.instanceCount;
                    iFld -= i10;
                    iFld = Test.sFld;
                    iFld -= (int)d1;
                    iFld *= -14;
                }
            case 90:
                Test.iArrFld[(-125 >>> 1) % N] -= 63189;
                Test.sFld += (short)i10;
                break;
            case 91:
                f2 = i10;
                break;
            case 92:
                Test.instanceCount = -14;
                break;
            case 93:
                iFld = i10;
                break;
            case 94:
                iFld -= i10;
                break;
            case 95:
                f2 += iFld;
                break;
            case 96:
                Test.iArrFld[(iFld >>> 1) % N] <<= i10;
                break;
            case 97:
                f2 -= -82;
                break;
            }
        }
        long meth_res = i10 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-55892, i11=-46, i12=21349, i13=-12, i14=-35910, i15=54599, i16=-14, i17=-58248, i18=42223, i19=34295,
            i20=6, iArr[]=new int[N];
        byte by2=83;
        double d2=-2.23242;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -14);
        FuzzerUtils.init(lArr1, -32503L);

        i = 1;
        do {
            iFld >>= iArr[i];
            iFld >>= (iFld -= (iMeth() + i));
            iFld += iFld;
        } while (++i < 242);
        iFld -= iFld;
        iFld = iFld1;
        for (i11 = 16; i11 < 263; ++i11) {
            lArr1[i11] -= (long)77.120F;
            iFld1 >>= by2;
            for (i13 = 5; i13 < 102; i13++) {
                i12 += (((i13 * i11) + iFld) - i);
                for (i15 = i11; i15 < 2; ++i15) {
                    Test.instanceCount = iFld1;
                }
                fFld *= fFld;
            }
            Test.instanceCount = -3;
            i12 %= (int)(i15 | 1);
            Test.instanceCount += (((i11 * i15) + Test.instanceCount) - i);
            for (i17 = 4; i17 < 102; ++i17) {
                i16 -= iFld;
                switch (((i17 % 2) * 5) + 74) {
                case 76:
                    iArr[i11 - 1] -= (int)d2;
                    by2 += (byte)(((i17 * i11) + i12) - i11);
                    Test.instanceCount -= i19;
                    break;
                case 82:
                    i18 -= (int)-93.179F;
                    i20 = 1;
                    while (++i20 < 2) {
                        try {
                            i12 = (iArr[i11 - 1] / iFld);
                            i18 = (Test.iArrFld[i17] % 31480);
                            iFld1 = (41283 / i14);
                        } catch (ArithmeticException a_e) {}
                        fFld += (i20 * i20);
                        try {
                            iFld1 = (i18 / -211);
                            i18 = (-137 / i12);
                            i14 = (-22576 % i12);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount >>= i14;
                        i19 += (i20 - Test.sFld);
                    }
                default:
                    Test.instanceCount = Test.instanceCount;
                }
            }
        }

        FuzzerUtils.out.println("i i11 i12 = " + i + "," + i11 + "," + i12);
        FuzzerUtils.out.println("by2 i13 i14 = " + by2 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 d2 i19 = " + i18 + "," + Double.doubleToLongBits(d2) + "," + i19);
        FuzzerUtils.out.println("i20 iArr lArr1 = " + i20 + "," + FuzzerUtils.checkSum(iArr) + "," +
            FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.sFld = " + Test.instanceCount + "," + iFld + "," +
            Test.sFld);
        FuzzerUtils.out.println("iFld1 fFld Test.iArrFld = " + iFld1 + "," + Float.floatToIntBits(fFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
