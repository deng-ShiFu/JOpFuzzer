// Generated by Java* Fuzzer test generator (1.0.001). Mon Apr 10 13:04:26 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1811867158L;
    public static float fFld=0.946F;
    public static byte byFld=56;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -121.408F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i5, long l, int i6) {

        int i7=-35660, i8=4817, i9=-63, iArr[][]=new int[N][N];
        short s=11042;
        boolean b=false;

        FuzzerUtils.init(iArr, 69);

        i5 = i6;
        i7 = 396;
        while (--i7 > 0) {
            i6 += i5;
            i6 += (((i7 * i6) + i7) - Test.instanceCount);
            i5 = i5;
        }
        i6 += (int)l;
        l = (long)-21.427F;
        for (i8 = 13; 221 > i8; ++i8) {
            i5 += (-144 + (i8 * i8));
            Test.fFld += (i8 + Test.fFld);
            s -= (short)i9;
            i9 = i5;
            if (b) {
                Test.instanceCount -= i6;
                i5 <<= -56283;
            } else {
                iArr[i8][i8 - 1] += i5;
            }
        }
        vMeth1_check_sum += i5 + l + i6 + i7 + i8 + i9 + s + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i4) {

        int i10=3, i11=-40607, i12=7, i13=92, i14=12, i15=5, iArr1[][]=new int[N][N];
        double d=63.89882;

        FuzzerUtils.init(iArr1, 12);

        vMeth1(i4, Test.instanceCount, i4);
        i4 %= (int)(i4 | 1);
        i4 -= (int)Test.instanceCount;
        for (i10 = 5; i10 < 338; ++i10) {
            i11 += (int)-6447L;
            for (i12 = 1; i12 < 5; i12++) {
                i4 += (i12 ^ i13);
                i13 += i10;
            }
            for (d = 1; d < 5; d += 3) {
                Test.fFld *= Test.instanceCount;
                i14 += i14;
                i15 = 1;
                do {
                    iArr1[(int)(d)][(45 >>> 1) % N] &= i15;
                    iArr1[(int)(d + 1)][i10 - 1] += i10;
                    Test.instanceCount += (((i15 * Test.byFld) + i12) - i15);
                } while (++i15 < 5);
            }
        }
        vMeth_check_sum += i4 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d) + i14 + i15 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i2, int i3) {

        int i16=-217, i17=-14, i18=46341, i19=433, iArr2[]=new int[N];
        double d1=2.59154;
        long lArr1[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr2, 3);
        FuzzerUtils.init(lArr1, 8L);
        FuzzerUtils.init(fArr, -1.251F);

        vMeth(i2);
        for (i16 = 1; i16 < 150; ++i16) {
            d1 = Test.instanceCount;
            iArr2[i16 - 1] = i2;
            Test.instanceCount >>= Test.byFld;
            for (i18 = 1; i18 < 11; i18++) {
                lArr1[i16 - 1] = Test.byFld;
                switch ((i16 % 1) + 100) {
                case 100:
                    i3 += -4;
                    iArr2[i16 + 1] = i3;
                    i19 += i18;
                    fArr[i16 + 1] += Test.instanceCount;
                    break;
                default:
                    i2 <<= i19;
                    i3 += (((i18 * i18) + i18) - i16);
                    i3 *= (int)Test.fFld;
                }
            }
        }
        long meth_res = i2 + i3 + i16 + i17 + Double.doubleToLongBits(d1) + i18 + i19 + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-14, i1=-22787, i20=-5, i21=-120, i22=0, i23=13, i24=-4, i25=-43975, i26=-66, iArr3[]=new int[N];
        boolean b1=true;
        double d2=-1.17120;
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, -40510L);
        FuzzerUtils.init(iArr3, -149);
        FuzzerUtils.init(byArr, (byte)86);

        for (i = 5; i < 287; i++) {
            lArr[i - 1] = (iMeth(-212, i1) - i1);
            Test.instanceCount = i;
            Test.fArrFld[i] *= Test.fFld;
            for (i20 = 5; i20 < 89; i20++) {
                switch (((i % 8) * 5) + 27) {
                case 29:
                    i21 += i20;
                    for (i22 = 1; i22 < 2; i22++) {
                        iArr3[i - 1] = i23;
                    }
                    break;
                case 32:
                    for (i24 = 2; i24 > 1; i24--) {
                        byArr[i24 + 1] = (byte)-11L;
                        i21 = (int)40378L;
                        i25 -= i21;
                    }
                    i21 *= i24;
                    break;
                case 54:
                    i1 <<= i20;
                    switch ((i % 8) + 22) {
                    case 22:
                        Test.instanceCount -= Test.instanceCount;
                        Test.byFld <<= (byte)Test.instanceCount;
                        iArr3 = FuzzerUtils.int1array(N, (int)3);
                        break;
                    case 23:
                        i23 += i24;
                        i1 -= i25;
                        if (b1) continue;
                        break;
                    case 24:
                        iArr3[i20] = (int)Test.fFld;
                        Test.instanceCount = Test.instanceCount;
                        break;
                    case 25:
                        Test.instanceCount /= (i23 | 1);
                        Test.instanceCount = i25;
                        i26 = 1;
                        while (++i26 < 2) {
                            i25 = (int)-100.137F;
                        }
                    case 26:
                        i21 = 7;
                        d2 -= 229;
                        break;
                    case 27:
                        iArr3[i] -= (int)Test.fFld;
                    case 28:
                        i23 += i20;
                    case 29:
                        i25 = i1;
                        break;
                    }
                    break;
                case 67:
                    i1 -= (int)Test.instanceCount;
                case 55:
                    Test.instanceCount += (i20 * i20);
                case 52:
                    i21 = (int)Test.instanceCount;
                case 49:
                    if (b1) continue;
                    break;
                case 51:
                    Test.instanceCount >>>= i20;
                    break;
                default:
                    Test.instanceCount = i23;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i20 = " + i + "," + i1 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 b1 = " + i24 + "," + i25 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i26 d2 lArr = " + i26 + "," + Double.doubleToLongBits(d2) + "," +
            FuzzerUtils.checkSum(lArr));
        FuzzerUtils.out.println("iArr3 byArr = " + FuzzerUtils.checkSum(iArr3) + "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.byFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
