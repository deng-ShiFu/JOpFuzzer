// Generated by Java* Fuzzer test generator (1.0.001). Mon Apr 10 13:04:26 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4772159049523286613L;
    public static float fFld=0.6F;
    public static volatile byte byFld=60;
    public short sArrFld[]=new short[N];
    public static boolean bArrFld[][]=new boolean[N][N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.iArrFld, 59345);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static void vMeth(int i3, float f) {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, -3);

        Test.instanceCount = (Math.abs(Test.instanceCount += -5) | iArr[(i3 >>> 1) % N]);
        vMeth_check_sum += i3 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr);
    }

    public static double dMeth(long l, int i9, int i10) {

        int i11=29962, i12=-95, i13=4, i14=3, i15=170;
        boolean b2=true;
        float f1=-80.190F;

        i10 &= (int)l;
        for (i11 = 11; i11 < 397; ++i11) {
            if (b2) {
                for (i13 = i11; 4 > i13; i13++) {
                    boolean b1=false;
                    i12 += i13;
                    if (b1) continue;
                }
                Test.bArrFld = Test.bArrFld;
            } else {
                f1 = 4;
                while ((f1 -= 3) > 0) {
                    Test.iArrFld[(int)(f1)] -= -17602;
                    Test.fFld = i12;
                }
            }
            i9 = i11;
            i10 += (((i11 * Test.fFld) + i11) - f1);
            i15 = 1;
            do {
                i9 = -33960;
                i12 <<= i10;
            } while (++i15 < 4);
        }
        long meth_res = l + i9 + i10 + i11 + i12 + i13 + i14 + (b2 ? 1 : 0) + Float.floatToIntBits(f1) + i15;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1() {

        int i7=-125, i8=0, i16=-1, i17=5, iArr3[]=new int[N];
        double d=0.130571;
        float fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr3, 121);
        FuzzerUtils.init(fArr, -31.1012F);
        FuzzerUtils.init(lArr, -14589L);

        i7 = 1;
        while (++i7 < 183) {
            for (d = 1; 9 > d; ++d) {
                i8 = (int)(((Test.byFld + Test.instanceCount) + -7) - ((i7 - i7) + (i7 - i8)));
                iArr3[(int)(d)] -= iArr3[(int)(d - 1)];
                fArr[(int)(d - 1)] = (i8--);
            }
            iArr3[i7] >>= iArr3[i7 - 1];
            Test.instanceCount = i7;
            i8 += (int)dMeth(Test.instanceCount, 71, i7);
        }
        for (i16 = 12; i16 < 276; ++i16) {
            i17 -= i16;
        }
        i17 *= 74;
        Test.fFld = -10;
        fArr[(207 >>> 1) % N] -= i16;
        lArr[(i7 >>> 1) % N] = i16;
        Test.instanceCount *= -64;
        vMeth1_check_sum += i7 + Double.doubleToLongBits(d) + i8 + i16 + i17 + FuzzerUtils.checkSum(iArr3) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i5, byte by, int i6) {

        int iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -6);

        i6 = iArr2[(-52398 >>> 1) % N];
        vMeth1();
        Test.fFld = i6;
        long meth_res = i5 + by + i6 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-46694, i1=-8, i2=-3, i4=-13, i18=162, i19=0, i20=49122, iArr1[]=new int[N];
        boolean b=false;
        short s=-540;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, -13);
        FuzzerUtils.init(dArr, -22.3660);

        i = 1;
        while (++i < 293) {
            for (i1 = i; 86 > i1; ++i1) {
                Test.instanceCount += (i1 ^ (long)Test.fFld);
                vMeth((int)(((-(sArrFld[i - 1] *= (short)i)) / ((Test.instanceCount * i2) | 1)) - (i2 /
                    ((long)(Test.fFld) | 1))), Test.fFld);
                i2 = (--i2);
                i4 = 1;
                do {
                    iArr1[i] >>= (int)(((-(--Test.instanceCount)) * (i4 - i2)) + i2);
                    if (b = ((b = (1 != iArr1[i1 + 1])) == ((Test.instanceCount + i4) != (Test.fFld * i1)))) break;
                    i2 = (int)52415L;
                    sArrFld[i + 1] ^= (short)Integer.reverseBytes(iMeth(-2, Test.byFld, 11) + i2);
                } while (++i4 < 1);
                for (i18 = 1; i18 < 1; i18++) {
                    switch ((i1 % 2) + 109) {
                    case 109:
                        Test.fFld *= i19;
                        if (b) continue;
                        break;
                    case 110:
                        iArr1[i1 - 1] = i4;
                        Test.iArrFld[i1] = (int)Test.fFld;
                        iArr1[i18 + 1] <<= (int)Test.instanceCount;
                        break;
                    }
                    Test.fFld *= -181;
                    s <<= (short)Test.instanceCount;
                    i2 = i18;
                }
                Test.instanceCount >>= -62412L;
            }
            i20 = 1;
            do {
                s += (short)(((i20 * i) + i) - i19);
                Test.fFld += (((i20 * s) + i4) - Test.instanceCount);
                i19 += (((i20 * i2) + i) - i1);
                i19 -= (int)Test.fFld;
                Test.byFld -= (byte)87;
                if (b) continue;
                i2 = i20;
                dArr[i] -= i4;
            } while (++i20 < 86);
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i4 b i18 = " + i4 + "," + (b ? 1 : 0) + "," + i18);
        FuzzerUtils.out.println("i19 s i20 = " + i19 + "," + s + "," + i20);
        FuzzerUtils.out.println("iArr1 dArr = " + FuzzerUtils.checkSum(iArr1) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.byFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.byFld);
        FuzzerUtils.out.println("sArrFld Test.bArrFld Test.iArrFld = " + FuzzerUtils.checkSum(sArrFld) + "," +
            FuzzerUtils.checkSum(Test.bArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
