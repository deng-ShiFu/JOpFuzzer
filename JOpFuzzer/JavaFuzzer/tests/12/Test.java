// Generated by Java* Fuzzer test generator (1.0.001). Mon Apr 10 13:03:48 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4168641312L;
    public static int iFld=-241;
    public static volatile double dFld=-1.87453;
    public static float fFld=116.985F;
    public byte byFld=3;
    public static int iArrFld[][]=new int[N][N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -79);
        FuzzerUtils.init(Test.fArrFld, 66.537F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(long l1, long l2) {

        double d=-2.92343, d1=-119.95695;
        int i1=14, i2=-44118, i3=25305, i4=-22970, i5=191;
        boolean b=true;
        float f=-2.108F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2525989744L);

        for (d = 9; d < 290; d += 3) {
            i1 = i1;
            for (i2 = (int)(d); i2 < 17; ++i2) {
                Test.iArrFld[(int)(d)][(int)(d - 1)] *= (int)l1;
                for (i4 = 1; i4 < 1; ++i4) {
                    i1 = (int)Test.instanceCount;
                    lArr = lArr;
                    if (b) continue;
                    d1 *= d1;
                    i1 = i3;
                    d1 *= i3;
                    i3 += (((i4 * i2) + i3) - i4);
                }
            }
            f += (float)1.20480;
            d1 = l2;
            i5 += (int)(d * d);
        }
        long meth_res = l1 + l2 + Double.doubleToLongBits(d) + i1 + i2 + i3 + i4 + i5 + (b ? 1 : 0) +
            Double.doubleToLongBits(d1) + Float.floatToIntBits(f) + FuzzerUtils.checkSum(lArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1(long l, int i) {

        int i6=1, i7=-14, i8=6, i9=25, i10=-2;
        float f1=-62.239F;
        double d2=1.31581;
        boolean b1=false;

        i += (int)(((--Test.iArrFld[(i >>> 1) % N][(i >>> 1) % N]) + l) + dMeth(l, Test.instanceCount));
        for (i6 = 353; i6 > 12; i6--) {
            i7 = i7;
            f1 = i8;
            i7 -= (int)-1.21880;
            i7 += i;
            for (i9 = i6; 5 > i9; ++i9) {
                Test.instanceCount += i9;
                d2 -= i9;
                if (b1) {
                    Test.instanceCount -= i8;
                    i7 *= i8;
                } else if (b1) {
                    i8 = i8;
                }
                Test.fArrFld[i6 + 1] = Test.instanceCount;
            }
            i10 += i6;
        }
        vMeth1_check_sum += l + i + i6 + i7 + Float.floatToIntBits(f1) + i8 + i9 + i10 + Double.doubleToLongBits(d2) +
            (b1 ? 1 : 0);
    }

    public static void vMeth() {

        int i11=19, i12=-2, i13=-9, i14=-6367, i15=-57280;
        boolean b2=true;

        vMeth1(Test.instanceCount, Test.iFld);
        Test.iFld = (int)Test.dFld;
        Test.iFld += (int)Test.fFld;
        for (i11 = 9; 180 > i11; i11++) {
            Test.instanceCount += i11;
            Test.iArrFld[i11 + 1] = Test.iArrFld[i11];
            for (i13 = 1; 9 > i13; i13++) {
                b2 = b2;
                Test.iArrFld[i11 + 1][i11 - 1] = i13;
                i15 = 1;
                while (++i15 < 2) {
                    Test.fArrFld[i13 + 1] = i12;
                    i14 = (int)Test.fFld;
                    if (b2) {
                        i14 &= (int)Test.instanceCount;
                        Test.fFld = (float)Test.dFld;
                    } else {
                        Test.iFld = i13;
                    }
                }
            }
        }
        vMeth_check_sum += i11 + i12 + i13 + i14 + (b2 ? 1 : 0) + i15;
    }

    public void mainTest(String[] strArr1) {

        double d3=36.109498;
        int i16=-53565, i17=-58819, i18=-6, i19=-9, i20=-2, i21=-21903, i22=-102;
        float f2=-2.633F;

        vMeth();
        try {
            d3 = 135;
            do {
                Test.iArrFld[(int)(d3)][(int)(d3)] >>= Test.iFld;
            } while (--d3 > 0);
            for (i16 = 3; 154 > i16; ++i16) {
                i17 *= byFld;
            }
        }
        catch (ArithmeticException exc1) {
            for (i18 = 4; i18 < 345; ++i18) {
                i19 -= i17;
                for (f2 = i18; f2 < 74; f2++) {
                    for (i21 = (int)(f2); i21 < 1; i21++) {
                        boolean b3=false;
                        switch ((((i20 >>> 1) % 1) * 5) + 12) {
                        case 17:
                            Test.iArrFld[i21 + 1][(int)(f2 + 1)] = 6;
                            if (b3) break;
                            i19 = i21;
                            Test.iArrFld[i18][i18 + 1] %= (int)(i17 | 1);
                        default:
                            i20 -= i16;
                            if (b3) {
                                i20 += (-11 + (i21 * i21));
                                i19 += (int)Test.fFld;
                                Test.instanceCount -= i20;
                                i17 >>= i18;
                            }
                            i19 += i21;
                        }
                        i19 = -14;
                        i19 = (int)Test.instanceCount;
                        Test.iArrFld[(int)(f2)][(int)(f2 - 1)] ^= i18;
                        Test.iArrFld[i21][i18] -= i16;
                        i22 <<= Test.iFld;
                        Test.iFld += (i21 - i20);
                    }
                    i20 |= (int)Test.instanceCount;
                    byFld = (byte)-12963;
                }
            }
        }

        FuzzerUtils.out.println("d3 i16 i17 = " + Double.doubleToLongBits(d3) + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 f2 = " + i18 + "," + i19 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.fFld byFld Test.iArrFld = " + Float.floatToIntBits(Test.fFld) + "," + byFld + ","
            + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
