// Generated by Java* Fuzzer test generator (1.0.001). Mon Apr 10 13:04:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-982204325887693369L;
    public static long lFld=34823L;
    public static volatile float fFld=38.247F;
    public static boolean bFld=true;
    public static short sArrFld[]=new short[N];
    public static int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-14860);
        FuzzerUtils.init(Test.iArrFld, 10);
        FuzzerUtils.init(Test.lArrFld, -13L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i11=16633, i12=-190, i13=-34253, i14=19835, i15=61228, i16=10, iArr[]=new int[N];
        short s1=-330, sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr, (short)26471);
        FuzzerUtils.init(iArr, -59224);
        FuzzerUtils.init(lArr, 107L);

        switch (((-163 >>> 1) % 4) + 67) {
        case 67:
            for (i11 = 18; i11 < 364; ++i11) {
                for (i13 = 1; i13 < 5; i13 += 2) {
                    Test.lFld = i13;
                    sArr[i11] -= (short)i14;
                    iArr = iArr;
                    i14 += i13;
                    iArr[i11 + 1] *= i13;
                    s1 >>= (short)Test.instanceCount;
                    Test.instanceCount += (i13 * i13);
                    Test.instanceCount *= s1;
                    i14 += i13;
                    for (i15 = 1; i15 < 3; i15++) {
                        i16 = (int)97L;
                        i14 = (int)Test.fFld;
                    }
                }
            }
            break;
        case 68:
            lArr[(i15 >>> 1) % N] = s1;
        case 69:
            i14 += i12;
            break;
        case 70:
            i16 <<= i12;
            break;
        default:
            i12 = i14;
        }
        long meth_res = i11 + i12 + i13 + i14 + s1 + i15 + i16 + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i4, int i5) {

        int i6=11462, i7=236, i8=47586, i9=-48232, i10=39841, i17=-60, i18=5, i19=-142, i20=0;
        long l1=228L, lArr1[]=new long[N];
        float f1=-14.119F, f2=1.887F, fArr[]=new float[N];
        boolean b=true;
        short s2=-30470;
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr1, -241589237L);
        FuzzerUtils.init(dArr, 1.75516);
        FuzzerUtils.init(fArr, -17.935F);

        for (i6 = 7; 326 > i6; ++i6) {
            for (i8 = 5; i8 > i6; --i8) {
                i5 &= (int)Test.instanceCount;
                for (l1 = 1; l1 < 1; l1++) {
                    f1 *= lMeth();
                    i10 += (int)(l1 * l1);
                }
                if (b) break;
            }
            for (i17 = 1; i17 < 5; i17++) {
                for (f2 = 2; f2 > 1; --f2) {
                    lArr1[(int)(f2 - 1)] |= i17;
                }
                i20 = 1;
                do {
                    switch ((i6 % 2) + 89) {
                    case 89:
                        b = b;
                        dArr[i20 - 1] = Test.lFld;
                        fArr[i17 + 1] += l1;
                        break;
                    case 90:
                        s2 = (short)i18;
                        break;
                    }
                } while (++i20 < 2);
            }
        }
        vMeth1_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + l1 + i10 + Float.floatToIntBits(f1) + (b ? 1 : 0) + i17 + i18
            + Float.floatToIntBits(f2) + i19 + i20 + s2 + FuzzerUtils.checkSum(lArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        int i=-1, i1=-14, i2=36161, i3=-10, i21=23964, iArr1[]=new int[N];
        short s=25858;
        float f=18.836F;
        long l=-5L;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr1, 198);
        FuzzerUtils.init(bArr, false);

        for (i = 2; 124 > i; i++) {
            s += (short)i;
            f += (l++);
            for (i2 = 1; i2 < 13; i2 += 2) {
                vMeth1(i21, i1);
                l += (long)Test.fFld;
                iArr1[i2 + 1] = i1;
                i1 -= i1;
                if (i1 != 0) {
                    vMeth_check_sum += i + i1 + s + Float.floatToIntBits(f) + l + i2 + i3 + i21 +
                        FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr);
                    return;
                }
            }
            i21 *= i21;
            bArr[i + 1] = Test.bFld;
            i1 = 15370;
            Test.bFld = Test.bFld;
            try {
                i3 = (iArr1[i - 1] / -253565992);
                i1 = (152 % i2);
                iArr1[i] = (2 / i21);
            } catch (ArithmeticException a_e) {}
            Test.sArrFld = Test.sArrFld;
        }
        vMeth_check_sum += i + i1 + s + Float.floatToIntBits(f) + l + i2 + i3 + i21 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i22=-58362, i23=-43142, i24=-3, i25=-26240, i26=7, i27=0, i28=4;
        byte by=72;
        double d=0.51773, d1=2.89556;
        short s3=-14586;

        vMeth();
        i22 = 319;
        while (--i22 > 0) {
            Test.lFld = i22;
            Test.instanceCount += i22;
        }
        i23 -= by;
        for (d = 18; 327 > d; ++d) {
            i24 = i24;
            for (i25 = 5; i25 < 81; ++i25) {
                if (false) {
                    for (i27 = 1; i27 < 2; ++i27) {
                        Test.fFld -= Test.instanceCount;
                        Test.bFld = Test.bFld;
                        if (Test.bFld) break;
                        i23 *= i27;
                        Test.lFld >>= i26;
                        Test.iArrFld[i25] *= i26;
                        i24 <<= i23;
                        Test.lArrFld[i27] = (long)Test.fFld;
                        switch ((int)((d % 2) + 16)) {
                        case 16:
                            i28 += (((i27 * i28) + i24) - i27);
                            Test.iArrFld[i27 + 1] <<= i24;
                            d1 = i26;
                        case 17:
                            Test.instanceCount += (((i27 * i24) + s3) - i22);
                            Test.iArrFld = Test.iArrFld;
                            Test.instanceCount += (i27 - i28);
                            i23 += (i27 * Test.instanceCount);
                            break;
                        }
                        i26 = 13;
                    }
                    i23 -= (int)Test.instanceCount;
                } else {
                    d1 -= i26;
                }
                i28 -= (int)Test.instanceCount;
            }
        }

        FuzzerUtils.out.println("i22 i23 by = " + i22 + "," + i23 + "," + by);
        FuzzerUtils.out.println("d i24 i25 = " + Double.doubleToLongBits(d) + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("d1 s3 = " + Double.doubleToLongBits(d1) + "," + s3);

        FuzzerUtils.out.println("Test.instanceCount Test.lFld Test.fFld = " + Test.instanceCount + "," + Test.lFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.bFld Test.sArrFld Test.iArrFld = " + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.sArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
